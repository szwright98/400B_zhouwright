import numpy as np

G = 4.498768e-6 #in units of kpc, Msun, Gyr

class M33Analytic Orbit:

    # class that will contain a series of functions to determine acceleration of M33, and predict is position and velocity

    def __init__(self,outfile):
        # initialize class, with the name of the output file.

        # define starting positions, velocities in kpc and km/s with respect to M31 center of mass (HW4)

        self.x = 98.56
        self.y = 119.99
        self.z = 127.76

        self.vx = 28.43
        self.vy = -173.92
        self.vz = -93.23
        

        # get scale lengths and masses of M31 components in kpc and Msun

        self.rdisk = 5. # from HW7 pdf
        self.Mdisk = 1.2e11 # from HW3 solutions
        self.rbulge = 1. # from HW7 pdf
        self.Mbulge = 1.9e10 # from HW3 solutions
        self.rhalo = 0.5 # from HW5 
        self.Mhalo = 1.921e12 # from HW3 solutions

    # function to determine accelaration as predicted by the Hernquist profile (for approximately spherical distributions)
    # a = -(GM/(r(r_a+r)^2)) * r vector 
    def HernquistAccel(self, M, r_a, x, y, z):
        # inputs:
        # M, mass of the halo or bulge in Msun
        # r_a, scale length of component in kpc
        # x,y,z, current position of the satellite wrt center of mass, in kpc
        # returns acceleration vector

        # create tuple to store the position as a vector
        rvec = [x,y,z]
        r = np.sum(rvec)
        # calculate coeffecient out front
        C = -(G*M)/(r(r_a+r)**2)
        return C * rvec

    # function to calculate the acceleration due to the gravity of the disk using the Miyamoto Nagai profile
    # potential = -GM/sqrt(R^2 +B^2)
    # R = sqrt(x^2 + y^2)
    # B = r_d + sqrt(z^2+z_d^2)
    # r_d is scale length of the disk, z_d is r_d/5.0 according to pdf
    # actual acceleration vector has slightly different vectors for each component, see HW7
    def MiyamotoNagaiAccel(self,M,rd,x,y,z):
        # inputs:
        # M, mass of the disk in Msun
        # rd, scale length of disk in kpc
        # x,y,z, current position of the satellite wrt center of mass, in kpc
        # returns acceleration vector
        R = np.sqrt(x**2 + y**2)
        zd = rd/5.0
        B = rd + np.sqrt(z**2+zd**2)
        rvec = [x,y,z]
        avec = [0,0,0]

        #pick out z component, as it has a different form
        for i in len(rvec):
            if i == 2:
                C = -(G*M*B/((R**2+B**2)**3/2))/np.sqrt(z**2+zd**2)
                avec[i] = C*rvec[i]
            else:
                C = -(G*M/((R**2+B**2)**3/2))
                avec[i] = C*rvec[i]

        return avec

    #function that returns the summed acceleration vector
    def M31Accel(self,x,y,z,):
        # x,y,z, current position of the satellite wrt center of mass, in kpc
        # returns summed acceleration vector
        DiskAcc = self.MiyamotoNagaiAccel(self.Mdisk,self.rdisk,x,y,z)
        HaloAcc = self.HernquistAccel(self.Mhalo, self.rhalo,x,y,z)
        BulgeAcc = self.HernquistAccel(self.Mbulge,self.rbulge,x,y,z,)

        TotalAcc = np.add(DiskAcc,HaloAcc)
        TotalAcc = np.add(TotalAcc,BulgeAcc)

        return TotalAcc

        
